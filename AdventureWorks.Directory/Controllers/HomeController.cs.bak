using System;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DevExpress.Web.Mvc;
using WholeFoods.Directory.Models;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Globalization;
using DevExpress.Web.Mvc.UI;
using System.Web.UI.WebControls;
using DevExpress.Web.ASPxGridView;

namespace WholeFoods.Directory.Controllers
{
    public class HomeController : Controller
    {

        public ViewResult Index()
        {
            return View();
        }

        public ViewResult SearchByName()
        {
            return View();
        }


        public ViewResult AllEmployees()
        {
            var employees = Employees.All.OrderBy(x => x.Last_Name);
            return View("AllEmployees", employees);
        }

        public ViewResult EmployeesByName(string nameCriteria)
        {

            IEnumerable<Employee> employees;
            if (nameCriteria != null && nameCriteria.Length > 0)
            {
                string name = nameCriteria.ToLowerInvariant();
                //if (double.TryParse(searchCriteria[0], out num))
                if (name.Contains(' '))
                {
                    string[] names = nameCriteria.Split(' ');
                    employees = Employees.All.Where(employee => (employee.Preferred_Name.ToLower().StartsWith(names[0], true, CultureInfo.InvariantCulture) ||
                                employee.First_Name.ToLower().StartsWith(names[0], true, CultureInfo.InvariantCulture)) &&
                                employee.Last_Name.ToLower().StartsWith(names[1], true, CultureInfo.InvariantCulture)).OrderBy(x => x.Last_Name); ;

                    //employees = Employees.All.Where(employee => employee.Preferred_Name.ToLower().Insert(employee.Preferred_Name.Length, " " + employee.Last_Name.ToLower()).StartsWith(name, true, CultureInfo.InvariantCulture));
                }
                else if (name.Length == 2)
                    //employees = Employees.All.Where(employee => employee.Branch.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    employees = Employees.All.Where(employee => employee.Preferred_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    employee.First_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    employee.Last_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    ((employee.Preferred_Name.ToLower().StartsWith(name.Substring(0, 1), true, CultureInfo.InvariantCulture) ||
                    employee.First_Name.ToLower().StartsWith(name.Substring(0, 1), true, CultureInfo.InvariantCulture)) &&
                    employee.Last_Name.ToLower().StartsWith(name.Substring(1, 1), true, CultureInfo.InvariantCulture))).OrderBy(x => x.Last_Name);

                else if (name.Length == 3)
                    //employees = Employees.All.Where(employee => employee.Branch.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    employees = Employees.All.Where(employee => employee.Preferred_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                employee.First_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                employee.Last_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                ((employee.Preferred_Name.ToLower().StartsWith(name.Substring(0, 1), true, CultureInfo.InvariantCulture) ||
                                employee.First_Name.ToLower().StartsWith(name.Substring(0, 1), true, CultureInfo.InvariantCulture)) &&
                                employee.Middle_Name.ToLower().StartsWith(name.Substring(1, 1), true, CultureInfo.InvariantCulture) &&
                                employee.Last_Name.ToLower().StartsWith(name.Substring(2, 1), true, CultureInfo.InvariantCulture))).OrderBy(x => x.Last_Name);


                else
                    employees = Employees.All.Where(employee => employee.Preferred_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                employee.First_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                employee.Last_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture)).OrderBy(x => x.Last_Name);
            }
            else
            {
                employees = Employees.All.Where(employee => employee.Last_Name.Equals(string.Empty)).OrderBy(x => x.Last_Name); ;
            }
            return View("EmployeesByName", employees);
        }

        public ActionResult EmployeesByCriteria(string nameCriteria, string Branch, string Departments, string Title)
        {
            IEnumerable<Employee> employees = null;
            IEnumerable<Employee> employees2 = null;
            IEnumerable<Employee> employees3 = null;
          

            if (Title != null && Title.Length > 0)
            {
                string role = Title.ToUpperInvariant();
                employees3 = Employees.All.Where(employee => employee.Role.ToUpperInvariant().Contains(role.ToUpperInvariant())).OrderBy(x => x.Last_Name);
            }
            else
                employees3 = Employees.All.OrderBy(x => x.Last_Name);

            if ((Branch != null && Branch.Length > 0 && Branch != "0") && (Departments != null && Departments.Length > 0 && Departments != "0"))
            {
                employees2 = employees3.Where(employee => (employee.Branch.ToUpperInvariant().Equals(Branch.ToUpperInvariant()) || employee.ManageBranch.Contains(Branch.ToUpperInvariant())) && employee.Dept_Display_Name.ToUpperInvariant().Contains(Departments.ToUpperInvariant())).OrderBy(x => x.Last_Name);
            }
            else if (Branch != null && Branch.Length > 0 && Branch != "0")
            {
                employees2 = employees3.Where(employee => employee.Branch.ToUpperInvariant().Equals(Branch.ToUpperInvariant()) || employee.ManageBranch.Contains(Branch.ToUpperInvariant())).OrderBy(x => x.Last_Name);
            }
            else if (Departments != null && Departments.Length > 0 && Departments != "0")
            {
                employees2 = employees3.Where(employee => employee.Dept_Display_Name.ToUpperInvariant().Contains(Departments.ToUpperInvariant())).OrderBy(x => x.Last_Name);
            }
            else
            {
                employees2 = employees3;
            }

            if (nameCriteria != null && nameCriteria.Length > 0)
            {
                string name = nameCriteria.ToLowerInvariant();
                //if (double.TryParse(searchCriteria[0], out num))
                if (name.Contains(' '))
                {
                    string[] names = nameCriteria.Split(' ');
                    employees = employees2.Where(employee => (employee.Preferred_Name.ToLower().StartsWith(names[0], true, CultureInfo.InvariantCulture) ||
                                employee.First_Name.ToLower().StartsWith(names[0], true, CultureInfo.InvariantCulture)) &&
                                employee.Last_Name.ToLower().StartsWith(names[1], true, CultureInfo.InvariantCulture)).OrderBy(x => x.Last_Name); ;

                    //employees = Employees.All.Where(employee => employee.Preferred_Name.ToLower().Insert(employee.Preferred_Name.Length, " " + employee.Last_Name.ToLower()).StartsWith(name, true, CultureInfo.InvariantCulture));
                }
                else if (name.Length == 2)
                    //employees = Employees.All.Where(employee => employee.Branch.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    employees = employees2.Where(employee => employee.Preferred_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    employee.First_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    employee.Last_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    ((employee.Preferred_Name.ToLower().StartsWith(name.Substring(0, 1), true, CultureInfo.InvariantCulture) ||
                    employee.First_Name.ToLower().StartsWith(name.Substring(0, 1), true, CultureInfo.InvariantCulture)) &&
                    employee.Last_Name.ToLower().StartsWith(name.Substring(1, 1), true, CultureInfo.InvariantCulture))).OrderBy(x => x.Last_Name);

                else if (name.Length == 3)
                    //employees = Employees.All.Where(employee => employee.Branch.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                    employees = employees2.Where(employee => employee.Preferred_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                employee.First_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                employee.Last_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                ((employee.Preferred_Name.ToLower().StartsWith(name.Substring(0, 1), true, CultureInfo.InvariantCulture) ||
                                employee.First_Name.ToLower().StartsWith(name.Substring(0, 1), true, CultureInfo.InvariantCulture)) &&
                                employee.Middle_Name.ToLower().StartsWith(name.Substring(1, 1), true, CultureInfo.InvariantCulture) &&
                                employee.Last_Name.ToLower().StartsWith(name.Substring(2, 1), true, CultureInfo.InvariantCulture))).OrderBy(x => x.Last_Name);


                else
                    employees = employees2.Where(employee => employee.Preferred_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                employee.First_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture) ||
                                employee.Last_Name.ToLower().StartsWith(name, true, CultureInfo.InvariantCulture)).OrderBy(x => x.Last_Name);
            }
            else
            {
                employees = employees2;
            }

            //if (employees != null && employees2 != null)
            //{
            //    var unionResults = employees.Intersect(employees2);
            //    if (unionResults.Count() > 0)
            //        employees = unionResults;

            //    return PartialView("EmployeeSearchResultsDX", employees);
            //}
            //else if (employees2 != null)
            //{
            //    return PartialView("EmployeeSearchResultsDX", employees2);
            //}
            //else
            //{
            //Session["TypedListModel"] = employees;
            //ViewData["Employees"] = employees;
            return PartialView("EmployeeSearchResultsDX", employees);
            //}
        }

        public ViewResult EmployeeById(string employee_id)
        {
            var employee = Employees.All.Single(x => x.Employee_Id == employee_id);
            return View(employee);
        }

        public ViewResult AllDepartments()
        {
            var allDepartments = Employees.All.Select(x => x.Department).Distinct().OrderBy(x => x);
            return View(allDepartments);
        }

        public ActionResult DepartmentsByBranch(string branch)
        {
            var branchDepartments = Employees.All.Where(x => x.Department.ToUpperInvariant().Equals(branch.ToUpperInvariant())).Distinct().OrderBy(x => x);
            SelectList selectList = new SelectList(branchDepartments);
            return Json(selectList);
            //return View(branchDepartments);
        }

        public ViewResult EmployeesByDepartment(string department)
        {
            var employees = Employees.All.Where(employee => employee.Dept_Display_Name.ToUpperInvariant().Contains(department.ToUpperInvariant())).OrderBy(x => x.Last_Name);
            return View("AllEmployees", employees);
        }

        public ViewResult AllBranches()
        {
            var allBranches = Employees.All.Select(x => x.Branch).Distinct().OrderBy(x => x);
            return View(allBranches);
        }

        public ViewResult EmployeesByBranch(string branch)
        {
            var employees = Employees.All.Where(employee => employee.Branch.ToUpperInvariant().Equals(branch.ToUpperInvariant()) || employee.ManageBranch.Contains(branch.ToUpperInvariant())).OrderBy(x => x.Last_Name);
            //var employees = Employees.All.Where(employee => employee.Branch.Equals(branch)).OrderBy(x => x.Last_Name);
            return View("AllEmployees", employees);
        }

        public ViewResult AllMarkets()
        {
            var allMarkets = Employees.All.Select(x => x.Market).Distinct().OrderBy(x => x);
            return View(allMarkets);
        }

        public ViewResult EmployeesByMarket(string market)
        {
            var employees = Employees.All.Where(employee => employee.Market.ToUpperInvariant().Equals(market.ToUpperInvariant())).OrderBy(x => x.Last_Name);
            return View("AllEmployees", employees);
        }

        //cascading dropdowns
        public ActionResult LocationPartial()
        {
            List<SelectListItem> Branches = new List<SelectListItem>();
            var allBranches = Employees.All.Select(x => x.Branch).Distinct().OrderBy(x => x);
            foreach (var branch in allBranches)
            {
                Branches.Add(new SelectListItem { Text = branch, Value = branch });
            }
            ViewData["Locations"] = new SelectList(Branches, "Value", "Text");
            return PartialView();

        }

        public ActionResult DepartmentPartial(string id)
        {
            List<SelectListItem> returnList = new List<SelectListItem>();
            if (id != null && id.Length > 0 && id != "0")
            {
                var employees = Employees.All.Where(employee => employee.Branch.Equals(id));
                var DepartmentRes = employees.Select(x => x.Department).Distinct().OrderBy(x => x);
                foreach (var department in DepartmentRes)
                {
                    returnList.Add(new SelectListItem { Value = department, Text = department });
                }
            }
            else
            {
                var allDepartments = Employees.All.Select(x => x.Department).Distinct().OrderBy(x => x);
                foreach (var department in allDepartments)
                {
                    returnList.Add(new SelectListItem { Value = department, Text = department });
                }
            }

            ViewData["Departments"] = new SelectList(returnList, "Value", "Text");
            return PartialView();

        }

        public ActionResult SearchEmployees()
        {
            List<SelectListItem> Branches = new List<SelectListItem>();
            var allBranches = Employees.All.Select(x => x.Branch).Distinct().OrderBy(x => x);
            foreach (var branch in allBranches)
            {
                Branches.Add(new SelectListItem { Text = branch, Value = branch });
            }
            //ViewBag.BranchRes = new SelectList(Branches, "Value", "Text");
            ViewData["Locations"] = new SelectList(Branches, "Value", "Text");

            List<SelectListItem> Departments = new List<SelectListItem>();
            var allDepartments = Employees.All.Select(x => x.Department).Distinct().OrderBy(x => x);
            foreach (var department in allDepartments)
            {
                Departments.Add(new SelectListItem { Text = department, Value = department });
            }
            //ViewBag.DepartmentRes = new SelectList(Departments, "Value", "Text");
            ViewData["Departments"] = new SelectList(Departments, "Value", "Text");
            return View();
        }

        //public JsonResult DepartmentResList(string Id)
        //{
        //    var DepartmentRes = DepartmentList.GetDepartment(Id);
        //    return Json(new SelectList(DepartmentRes, "Value", "Text"), JsonRequestBehavior.AllowGet);
        //}

        public ActionResult ExportTo(string OutputFormat)
        {
            var model = Session["TypedListModel"];

            switch (OutputFormat.ToUpper())
            {
                case "PDF":
                    return GridViewExtension.ExportToPdf(GridViewHelper.ExportGridViewSettings, model);
                case "XLSX":
                    return GridViewExtension.ExportToXlsx(GridViewHelper.ExportGridViewSettings, model);
                default:
                    return RedirectToAction("Index");
            }
        }

        public ActionResult ExportToXLSX()
        {
            var model = Session["TypedListModel"];
            return GridViewExtension.ExportToXlsx(GridViewHelper.ExportGridViewSettings, model);
        }
        public ActionResult ExportToPDF()
        {
            var model = Session["TypedListModel"];
            return GridViewExtension.ExportToPdf(GridViewHelper.ExportGridViewSettings, model);
        }

        public static class GridViewHelper
        {
            private static GridViewSettings exportGridViewSettings;

            public static GridViewSettings ExportGridViewSettings
            {
                get
                {
                    if (exportGridViewSettings == null)
                        exportGridViewSettings = CreateExportGridViewSettings();
                    return exportGridViewSettings;
                }
            }

            private static GridViewSettings CreateExportGridViewSettings()
            {
                GridViewSettings settings = new GridViewSettings();

                settings.Name = "EmployeeGridView";
                settings.CallbackRouteValues = new { Controller = "Home", Action = "EmployeesByCriteria" };
                settings.SettingsPager.PageSize = 25;
                settings.Width = Unit.Percentage(80);
                settings.Height = Unit.Pixel(1000);
                settings.Columns.Add("Full_Name", "Name");
                settings.Columns.Add("Extension", "Ext");
                settings.Columns.Add("Phone_Number", "Phone");
                settings.Columns.Add("Branch_Display_Name", "Location");
                settings.Columns.Add("Dept_Display_Name", "Department");
                settings.Columns.Add("Job_Title", "Job Title");
                settings.ClientVisible = true;
                settings.ClientSideEvents.BeginCallback = "OnBeginCallback";
                settings.SettingsLoadingPanel.Mode = GridViewLoadingPanelMode.Disabled;
                settings.SettingsExport.RenderBrick = (sender, e) =>
                {
                    if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                        e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
                };

                return settings;
            }
        }
    }
}